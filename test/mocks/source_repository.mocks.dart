// Mocks generated by Mockito 5.3.2 from annotations
// in financial_tracker/test/mocks/generate.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:financial_tracker/Domains/sources/entities/source.dart' as _i2;
import 'package:financial_tracker/Domains/sources/source_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSource_0 extends _i1.SmartFake implements _i2.Source {
  _FakeSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SourceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSourceRepository extends _i1.Mock implements _i3.SourceRepository {
  MockSourceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Source> getSource(int? sourceId) => (super.noSuchMethod(
        Invocation.method(
          #getSource,
          [sourceId],
        ),
        returnValue: _i4.Future<_i2.Source>.value(_FakeSource_0(
          this,
          Invocation.method(
            #getSource,
            [sourceId],
          ),
        )),
      ) as _i4.Future<_i2.Source>);
  @override
  _i4.Future<List<_i2.Source>> getSources() => (super.noSuchMethod(
        Invocation.method(
          #getSources,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Source>>.value(<_i2.Source>[]),
      ) as _i4.Future<List<_i2.Source>>);
  @override
  _i4.Future<_i2.Source> addSource(Map<String, Object>? map) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSource,
          [map],
        ),
        returnValue: _i4.Future<_i2.Source>.value(_FakeSource_0(
          this,
          Invocation.method(
            #addSource,
            [map],
          ),
        )),
      ) as _i4.Future<_i2.Source>);
  @override
  _i4.Future<void> deleteSource(int? sourceId) => (super.noSuchMethod(
        Invocation.method(
          #deleteSource,
          [sourceId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> updateSource(_i2.Source? source) => (super.noSuchMethod(
        Invocation.method(
          #updateSource,
          [source],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
