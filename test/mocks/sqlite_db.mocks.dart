// Mocks generated by Mockito 5.3.2 from annotations
// in financial_tracker/test/mocks/generate.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:financial_tracker/Infrastructures/database/sqlite/db.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SqliteDB].
///
/// See the documentation for Mockito's code generation for more information.
class MockSqliteDB extends _i1.Mock implements _i3.SqliteDB {
  MockSqliteDB() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Database get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDatabase_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.Database);
  @override
  set db(_i2.Database? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic open(String? path) => super.noSuchMethod(Invocation.method(
        #open,
        [path],
      ));
  @override
  _i4.Future<int> insert(
    String? tableName,
    dynamic object,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            tableName,
            object,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<Map<dynamic, dynamic>?> get(
    String? tableName,
    int? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            tableName,
            id,
          ],
        ),
        returnValue: _i4.Future<Map<dynamic, dynamic>?>.value(),
      ) as _i4.Future<Map<dynamic, dynamic>?>);
  @override
  _i4.Future<List<Map<dynamic, dynamic>>> getAll(String? tableName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [tableName],
        ),
        returnValue: _i4.Future<List<Map<dynamic, dynamic>>>.value(
            <Map<dynamic, dynamic>>[]),
      ) as _i4.Future<List<Map<dynamic, dynamic>>>);
  @override
  _i4.Future<int> delete(
    String? tableName,
    int? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [
            tableName,
            id,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> update(
    String? tableName,
    dynamic object,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            tableName,
            object,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}
