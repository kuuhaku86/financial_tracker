// Mocks generated by Mockito 5.3.2 from annotations
// in financial_tracker/test/mocks/generate.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:financial_tracker/Domains/transactions/entities/add_recurring_transaction.dart'
    as _i9;
import 'package:financial_tracker/Domains/transactions/entities/add_transaction.dart'
    as _i8;
import 'package:financial_tracker/Domains/transactions/entities/period.dart'
    as _i4;
import 'package:financial_tracker/Domains/transactions/entities/recurring_transaction.dart'
    as _i5;
import 'package:financial_tracker/Domains/transactions/entities/transaction.dart'
    as _i3;
import 'package:financial_tracker/Domains/transactions/entities/transaction_type.dart'
    as _i2;
import 'package:financial_tracker/Domains/transactions/transaction_repository.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTransactionType_0 extends _i1.SmartFake
    implements _i2.TransactionType {
  _FakeTransactionType_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransaction_1 extends _i1.SmartFake implements _i3.Transaction {
  _FakeTransaction_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePeriod_2 extends _i1.SmartFake implements _i4.Period {
  _FakePeriod_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecurringTransaction_3 extends _i1.SmartFake
    implements _i5.RecurringTransaction {
  _FakeRecurringTransaction_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRepository extends _i1.Mock
    implements _i6.TransactionRepository {
  MockTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.TransactionType> getTransactionType(int? transactionTypeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionType,
          [transactionTypeId],
        ),
        returnValue:
            _i7.Future<_i2.TransactionType>.value(_FakeTransactionType_0(
          this,
          Invocation.method(
            #getTransactionType,
            [transactionTypeId],
          ),
        )),
      ) as _i7.Future<_i2.TransactionType>);
  @override
  _i7.Future<List<_i3.Transaction>> getTransactions() => (super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [],
        ),
        returnValue:
            _i7.Future<List<_i3.Transaction>>.value(<_i3.Transaction>[]),
      ) as _i7.Future<List<_i3.Transaction>>);
  @override
  _i7.Future<_i3.Transaction> getTransaction(int? transactionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransaction,
          [transactionId],
        ),
        returnValue: _i7.Future<_i3.Transaction>.value(_FakeTransaction_1(
          this,
          Invocation.method(
            #getTransaction,
            [transactionId],
          ),
        )),
      ) as _i7.Future<_i3.Transaction>);
  @override
  _i7.Future<List<_i2.TransactionType>> getTransactionTypes() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionTypes,
          [],
        ),
        returnValue: _i7.Future<List<_i2.TransactionType>>.value(
            <_i2.TransactionType>[]),
      ) as _i7.Future<List<_i2.TransactionType>>);
  @override
  _i7.Future<List<_i4.Period>> getPeriods() => (super.noSuchMethod(
        Invocation.method(
          #getPeriods,
          [],
        ),
        returnValue: _i7.Future<List<_i4.Period>>.value(<_i4.Period>[]),
      ) as _i7.Future<List<_i4.Period>>);
  @override
  _i7.Future<_i4.Period> getPeriod(int? periodId) => (super.noSuchMethod(
        Invocation.method(
          #getPeriod,
          [periodId],
        ),
        returnValue: _i7.Future<_i4.Period>.value(_FakePeriod_2(
          this,
          Invocation.method(
            #getPeriod,
            [periodId],
          ),
        )),
      ) as _i7.Future<_i4.Period>);
  @override
  _i7.Future<_i5.RecurringTransaction> getRecurringTransaction(
          int? recurringTransactionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecurringTransaction,
          [recurringTransactionId],
        ),
        returnValue: _i7.Future<_i5.RecurringTransaction>.value(
            _FakeRecurringTransaction_3(
          this,
          Invocation.method(
            #getRecurringTransaction,
            [recurringTransactionId],
          ),
        )),
      ) as _i7.Future<_i5.RecurringTransaction>);
  @override
  _i7.Future<_i3.Transaction> addTransaction(_i8.AddTransaction? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [payload],
        ),
        returnValue: _i7.Future<_i3.Transaction>.value(_FakeTransaction_1(
          this,
          Invocation.method(
            #addTransaction,
            [payload],
          ),
        )),
      ) as _i7.Future<_i3.Transaction>);
  @override
  _i7.Future<_i5.RecurringTransaction> addRecurringTransaction(
          _i9.AddRecurringTransaction? payload) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRecurringTransaction,
          [payload],
        ),
        returnValue: _i7.Future<_i5.RecurringTransaction>.value(
            _FakeRecurringTransaction_3(
          this,
          Invocation.method(
            #addRecurringTransaction,
            [payload],
          ),
        )),
      ) as _i7.Future<_i5.RecurringTransaction>);
}
